
datasource:
  username: sa
  password: sa
  # schema: something
  url: jdbc:h2:mem:testdb;MODE=Mysql;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE;
  driver:
    classname: org.h2.Driver


spring:
  # Specify behavior of Serialization
  # and Deserialization of JSON
  # Jackson is the default JSON library
  # for Spring Boot
  # https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#application-properties.jackson
  jackson:
    default-property-inclusion: non-null
    serialization:
      indent-output: true
      # false means write as ISO-8601
      write-dates-as-timestamps: false

  jpa:
    hibernate:
      # none, validate, update, create, create-drop
      ddl-auto: none

  # Enable H2 console
  h2:
    console:
      enabled: true
      path: /h2-console
      settings:
        trace: true
        web-allow-others: false

  #  Console output
  output:
    # Enable ANSI colors in the console
    ansi:
      enabled: ALWAYS


# ##### Logging configuration #####
logging:
  level:
    root: DEBUG

    com:
      example:
        # At INFO, log startup of the service
        airline: INFO
      zaxxer:
        hikari:
          pool:
            HikariPool: DEBUG

    # org.apache.catalina.authenticator.jaspic.AuthConfigFactoryImpl
    org:
      # apache: ERROR
      apache:
        catalina:
          authenticator:
            jaspic:
              # some functionality for h2-console
              AuthConfigFactoryImpl: WARN
          session: ERROR
        coyote:
          http11:
            # DEBUG shows close of HttpConnection
            Http11Processor: INFO
        tomcat:
          util:
            net:
              NioEndpoint: ERROR


      hibernate:
        boot: INFO
        integrator:
          internal: INFO
        internal: INFO
          # SessionFactoryImpl: INFO
        HQL_FUNCTIONS: INFO
        orm:
          idgen:
            factory: WARN
        query:
          sqm:
            function:
              SqmFunctionRegistry: INFO
        SQL: DEBUG
        tool:
          schema:
            spi: DEBUG
        type:
          BasicTypeRegistry: WARN
          descriptor:
            jdbc:
              spi:
                JdbcTypeRegistry: INFO
            # Enable logging of SQL
            sql:
              BasicBinder: TRACE

      springframework:
        aop: INFO
        aot: INFO
        beans: INFO
        boot:
          autoconfigure:
            logging: INFO
          availability: DEBUG
        # boot: debug
        cache: INFO
        cglib: INFO
        context: INFO
        core: INFO
        dao: INFO
        expression: INFO
        format: INFO
        http: INFO
        instrument: INFO
        jca: INFO
        jdbc: DEBUG
        jms: INFO
        jmx: INFO
        messaging: INFO
        mock: INFO
        # orm: INFO
        orm:
          jpa: DEBUG
        r2dbc: INFO
        scripting: INFO
        test: INFO
        transaction: INFO
        ui: INFO
        util: INFO
        validation: DEBUG
        # web: INFO
        web:
          # servlet: INFO
          # servlet:
          servlet:
            dispatcher: INFO
            request: DEBUG
            response: DEBUG
            web: INFO
            webmvc: INFO
            websocket: INFO
            webflux: INFO
            mvc:
              method:
                annotation:
                  HttpEntityMethodProcessor: DEBUG


    # liquibase: INFO
    liquibase:
      # Steps in each changelog (INFO has much detail)
      changelog: WARN
      command: INFO
      configuration: INFO
      # kind of a log of executed statements
      executor: INFO
      parser: INFO
      servicelocator: INFO
      # Notes execution of 1 or more changesets / SQL statements
      statement: WARN
      # logs each changeset #, filename, author (INFO)
      ui: WARN
      # checksum calculation / changeset
      util: INFO


# Metrics related configurations
management:

  # Auto-configuation of liveness/readiness probes
  health:
    probes:
      enabled: true

  endpoints:
    # access:
    #   default: unrestricted
    web:
      base-path: /actuator
      # cors:
      #   allowed-origins: "http://example.com"
      #   allowed-methods: "GET,POST"
      exposure:
        include: '*'

  endpoint:
    # SRE Health (liveness, readiness) for integration with kubernetes
    health:
      probes:
        enabled: true
      liveness:
        enabled: true
      readiness:
        enabled: true
      show-details: always
      # status:
      #   order: fatal,down,out-of-service,degraded,unknown,up
      #   http-mapping:
      #     degraded: 242
      #     unknown: 242
      #     fatal: 503
      #     down: 503
      #     out-of-service: 503

    liquibase:
      access: UNRESTRICTED

    metrics:
      access: UNRESTRICTED

    prometheus:
      access: UNRESTRICTED


#  metrics:
#    export:
#      prometheus:
#        enabled: true

  # ---------- Feature specific configurations ----------
  # --- Metrics (Prometheus) ---
  prometheus:
    metrics:
      export:
        enabled: true


  # --- Informaion about the application ---
  # {"git":{"commit":{"time":"2019-11-23T23:41:52Z","id":"5b27927"},"branch":"development"}}
  info:
    app:
      name: ${spring.application.name}
      version: ${project.version}
      java:
        version: ${java.version}
        source: ${java.version}
        target: ${java.version}
    env:
      enabled: true
    java:
      enabled: true
    git:
      mode: full

  tracing:
    sampling:
      probability: 1.0

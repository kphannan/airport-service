/*
 * This file was generated by the Gradle 'init' task.
 *
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    id 'buildlogic.java-application-conventions'
    id 'buildlogic.java-spring-conventions'

    // TODO move these to the spring conventions....
    id 'org.springframework.boot'
    id 'io.spring.dependency-management'

    // TODO move to java conventions...
    id 'io.freefair.lombok'

    id 'com.gorylenko.gradle-git-properties'

}





// dependencies {
//     implementation 'org.apache.commons:commons-text'
//     implementation project(':utilities')
// }

dependencies {
    implementation 'org.apache.commons:commons-text'
    // implementation project(':utilities')
    implementation project(':api')
    implementation project(':lib')
    // api project(':api')

    // implementation "org.springframework.boot:spring-boot-starter-log4j2"
	// modules {
	// 	module( "org.springframework.boot:spring-boot-starter-logging" ) {
	// 		replacedBy("org.springframework.boot:spring-boot-starter-log4j2", "Use Log4j2 instead of Logback")
	// 	}
	// }

    // TODO move to spring convention
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation "org.springframework.boot:spring-boot-starter-logging"

    // implementation( 'org.springframework.boot:spring-boot-starter-log4j2' )
    // implementation( 'org.springframework.boot:spring-boot-starter-log4j2' ) {
    //     // implementation( 'org.springframework.boot:spring-boot-starter-logging' )
    //     exclude  group: 'org.springframework.boot', module:  'spring-boot-starter-logging'
    // }

    // --- Annotation Processor
    implementation( "jakarta.annotation:jakarta.annotation-api:3.0.0" )

    implementation("org.mapstruct:mapstruct:${mapstructVersion}")
    annotationProcessor("org.mapstruct:mapstruct-processor:${mapstructVersion}")
    // ----- Frameworks -----
    // --- Logging
    // implementation( "org.apache.logging.log4j:log4j-core:${log4jVersion}" )
    // implementation( "org.apache.logging.log4j:log4j-api:${log4jVersion}" )
    // --- Data format / validation
    //   - needed for yaml configuration of log4j2
    implementation( "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jacksonDatabindVersion}" )
    implementation( "com.fasterxml.jackson.core:jackson-databind:${jacksonDatabindVersion}" )

    // ===== Persistence =====
    // implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.liquibase:liquibase-core'
    // --- Database
    runtimeOnly 'com.h2database:h2'
    // runtimeOnly 'com.ibm.db2:jcc'
    runtimeOnly 'com.mysql:mysql-connector-j'
    // runtimeOnly 'com.oracle.database.jdbc:ojdbc11'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    runtimeOnly 'org.postgresql:postgresql'

    // ----- Quality Assurance -----
    testAnnotationProcessor("org.mapstruct:mapstruct-processor:${mapstructVersion}")
    // --- Unit Testing
    testImplementation( "io.github.hakky54:logcaptor:${logcaptorVersion}" )

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}





application {
    // Define the main class for the application.
    // mainClass = 'com.example.app.App'
    mainClass = 'com.example.AirportServiceApplication'
}

run {
    // args = ['--trace']
    args = ['--spring.profiles.active=local']
}

// bootJar {
//     // Not sure yet why this is relevant for a library
//     mainClass = 'com.example.app.App'
//     // archiveFileName = 'custom-app-name.jar'
// }


gitProperties {
    dotGitDirectory = project.rootProject.layout.projectDirectory.dir(".git")
    // dotGitDirectory = "${project.rootDir}/.git"
}


// springBoot {
//     builidInfo()
// }

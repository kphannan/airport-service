/*
 * This file was generated by the Gradle 'init' task.
 *
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    id 'buildlogic.java-application-conventions'
    // id 'buildlogic.java-spring-conventions'

    // TODO move these to the spring conventions....
    id 'org.springframework.boot'
    id 'io.spring.dependency-management'

    // TODO move to java conventions...
    id 'io.freefair.lombok'

    // id 'com.gorylenko.gradle-git-properties'
}





configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }

    integrationTestImplementation.extendsFrom testImplementation
}


dependencies {
    // implementation project(':utilities')
    implementation project( ':api' )
    implementation project( ':lib' )


	implementation libs.bundles.spring.boot.base
	implementation libs.bundles.spring.boot.persistence

    // --- Annotation Processor
	implementation libs.bundles.spring.validation

	implementation libs.mapstruct
    annotationProcessor libs.mapstruct.processor

    // ----- Frameworks -----
    // --- Logging
    // --- Data format / validation
    //   - needed for yaml configuration of log4j2
//	implementation libs.jackson.databind
//	implementation libs.jackson.dataformat.yaml
//    implementation libs.jackson.dataformat.xml

    // --- OpenAPI doc
    implementation libs.springdoc.openapi.ui
    // implementation( "org.springdoc:springdoc-openapi-starter-webmvc-ui:${swaggerVersion}" )

    // testImplementation( "org.springdoc:springdoc-openapi-starter-webmvc-api:2.8.6" )

    // ===== Persistence =====
    implementation( "org.liquibase:liquibase-core" )
    // --- Database
    runtimeOnly( "com.h2database:h2" )
    // runtimeOnly( "com.ibm.db2:jcc" )
    runtimeOnly( "com.mysql:mysql-connector-j" )
    // runtimeOnly( "com.oracle.database.jdbc:ojdbc11" )
    runtimeOnly( "org.mariadb.jdbc:mariadb-java-client" )
    runtimeOnly( "org.postgresql:postgresql" )
    // ----- Quality Assurance -----
    testAnnotationProcessor libs.mapstruct.processor
    // --- Unit Testing
	testImplementation libs.logcaptor

    testImplementation( "org.springframework.boot:spring-boot-starter-test" )
    // --- BDD
    testImplementation( "io.karatelabs:karate-junit5:${karateVersion}" )
}


processResources {
    filesMatching('application.properties') {
        expand(project.properties)
    }
}

sourceSets {
    test {
        resources {
            srcDir file('src/test/java')
            exclude '**/*.java'
        }
    }

    integrationTest {
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
        resources {
            srcDir file('src/integrationTest/features')
            exclude '**/*.java'
        }
    }
}




application {
    // Define the main class for the application.
    // mainClass = 'com.example.app.App'
    mainClass = 'com.example.AirportServiceApplication'
}


tasks.register('integrationTest', Test) {
    group = 'Verification'
    description = 'runs the integration tests with Cucumber/Selenium/Karate'

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath

    mustRunAfter test
    useJUnitPlatform()

    // pull karate options into the runtime
    systemProperty "karate.options", System.properties.getProperty("karate.options")
    // pull karate env into the runtime
    systemProperty "karate.env", System.properties.getProperty("karate.env")
    // ensure tests are always run
    outputs.upToDateWhen { false }
}


run {
    // args = ['--trace']
    args = [
        '--spring.profiles.active=local'
    ]
}

// bootJar {
//     // Not sure yet why this is relevant for a library
//     mainClass = 'com.example.app.App'
//     // archiveFileName = 'custom-app-name.jar'
// }


// gitProperties {
//     dotGitDirectory = project.rootProject.layout.projectDirectory.dir(".git")
//     // dotGitDirectory = "${project.rootDir}/.git"
// }


// springBoot {
//     builidInfo()
// }
